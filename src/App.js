import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FaCalendarAlt, FaMapMarkerAlt, FaQuoteLeft, FaBook, FaHeart, FaEdit, FaListUl } from 'react-icons/fa';
import Countdown from 'react-countdown';
import confetti from 'canvas-confetti';
import { ref, push, onValue, set } from 'firebase/database';
import { database } from './firebase';

// Import new components
import MusicControl from './components/MusicControl';
import { 
  FloatingHearts, 
  HeaderPetalsEffect, 
  HeaderBalloonsEffect, 
  HeaderFireworksEffect, 
  HeaderHeartsEffect,
  FlowerCursorEffect
} from './components/VisualEffects';
import { AnimatedSection, StaggeredContainer, StaggeredItem } from './components/ScrollAnimations';
import WeddingMap from './components/WeddingMap';

import './styles/main.css';

// Import images
import brideImage from './assets/images/avt_yen.jpg';
import groomImage from './assets/images/avt_linh.jpg';
import ac1 from './assets/images/ac1.jpg';
import ac2 from './assets/images/ac2.jpg';
import ac3 from './assets/images/ac3.jpg';
import ac4 from './assets/images/ac4.jpg';
import ac5 from './assets/images/ac5.jpg';
import ac6 from './assets/images/ac6.jpg';

// Demo images - you can replace these with actual photos
const DEMO_BRIDE_IMAGE = brideImage;
const DEMO_GROOM_IMAGE = groomImage;

const DEMO_GALLERY_IMAGES = [
  ac1,
  ac2,
  ac3,
  ac4,
  ac5,
  ac6
];

// Love quotes for slideshow
const LOVE_QUOTES = [
  "T√¨nh y√™u kh√¥ng ch·ªâ l√† nh√¨n v√†o m·∫Øt nhau, m√† l√† c√πng nhau nh√¨n v·ªÅ m·ªôt h∆∞·ªõng.",
  "Trong v·∫°n v·∫≠t, ta ch·ªâ y√™u m√¨nh em.",
  "Y√™u em l√† ƒëi·ªÅu ƒë·∫πp nh·∫•t ƒë√£ x·∫£y ra v·ªõi anh.",
  "T√¨nh y√™u ƒë√≠ch th·ª±c b·∫Øt ƒë·∫ßu khi kh√¥ng mong ƒë·ª£i ƒëi·ªÅu g√¨ ƒë·ªïi l·∫°i.",
  "Em l√† l√Ω do anh tin v√†o t√¨nh y√™u ƒë√≠ch th·ª±c.",
  "M·ªói ng√†y b√™n em ƒë·ªÅu l√† m·ªôt ng√†y ƒë·∫∑c bi·ªát."
];

// Wedding date for countdown
const WEDDING_DATE = new Date('2025-06-14T11:00:00');

// Love Quotes Slideshow
function LoveQuotes() {
  const [currentQuote, setCurrentQuote] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentQuote(prev => (prev + 1) % LOVE_QUOTES.length);
    }, 4000);
    return () => clearInterval(interval);
  }, []);

  return (
    <AnimatedSection className="love-quotes-section">
      <motion.div 
        className="quote-container"
        key={currentQuote}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -20 }}
        transition={{ duration: 0.5 }}
      >
        <FaQuoteLeft className="quote-icon" />
        <p className="quote-text">{LOVE_QUOTES[currentQuote]}</p>
      </motion.div>
    </AnimatedSection>
  );
}

// Countdown Timer
function CountdownTimer() {
  const renderer = ({ days, hours, minutes, seconds, completed }) => {
    if (completed) {
      return (
        <motion.div 
          className="countdown-completed"
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
        >
          <motion.h3
            animate={{ 
              scale: [1, 1.1, 1],
              rotate: [-5, 5, -5]
            }}
            transition={{ 
              duration: 2,
              repeat: Infinity,
              ease: "easeInOut"
            }}
          >
            üéâ H√¥m nay l√† ng√†y c∆∞·ªõi! üéâ
          </motion.h3>
        </motion.div>
      );
    } else {
      return (
        <motion.div 
          className="countdown-container"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          <motion.h3 
            className="countdown-title"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.3 }}
          >
            ‚è∞ C√≤n l·∫°i bao l√¢u n·ªØa?
          </motion.h3>
          <motion.div 
            className="countdown-timer"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
          >
            <motion.div 
              className="time-unit"
              whileHover={{ scale: 1.05, y: -5 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <motion.span 
                className="time-number"
                animate={{ 
                  scale: [1, 1.1, 1],
                  rotate: [0, 5, 0]
                }}
                transition={{ 
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
              >
                {days}
              </motion.span>
              <span className="time-label">Ng√†y</span>
            </motion.div>
            <motion.div 
              className="time-unit"
              whileHover={{ scale: 1.05, y: -5 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <motion.span 
                className="time-number"
                animate={{ 
                  scale: [1, 1.1, 1],
                  rotate: [0, 5, 0]
                }}
                transition={{ 
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut",
                  delay: 0.5
                }}
              >
                {hours}
              </motion.span>
              <span className="time-label">Gi·ªù</span>
            </motion.div>
            <motion.div 
              className="time-unit"
              whileHover={{ scale: 1.05, y: -5 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <motion.span 
                className="time-number"
                animate={{ 
                  scale: [1, 1.1, 1],
                  rotate: [0, 5, 0]
                }}
                transition={{ 
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut",
                  delay: 1
                }}
              >
                {minutes}
              </motion.span>
              <span className="time-label">Ph√∫t</span>
            </motion.div>
            <motion.div 
              className="time-unit"
              whileHover={{ scale: 1.05, y: -5 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <motion.span 
                className="time-number"
                animate={{ 
                  scale: [1, 1.1, 1],
                  rotate: [0, 5, 0]
                }}
                transition={{ 
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut",
                  delay: 1.5
                }}
              >
                {seconds}
              </motion.span>
              <span className="time-label">Gi√¢y</span>
            </motion.div>
          </motion.div>
        </motion.div>
      );
    }
  };

  return <Countdown date={WEDDING_DATE} renderer={renderer} />;
}

// Guest Book Component
function GuestBook() {
  const [guestMessages, setGuestMessages] = useState([]);
  const [newMessage, setNewMessage] = useState({ name: '', message: '' });
  const [searchTerm, setSearchTerm] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    const messagesRef = ref(database, 'messages');
    const unsubscribe = onValue(messagesRef, (snapshot) => {
      const data = snapshot.val();
      if (data) {
        const messages = Object.entries(data).map(([id, message]) => ({
          id,
          ...message
        })).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
        setGuestMessages(messages);
      }
    });
    return () => unsubscribe();
  }, []);

  const formatTimestamp = (timestamp) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInMinutes = Math.floor((now - date) / (1000 * 60));
    if (diffInMinutes < 60) {
      return `${diffInMinutes} ph√∫t tr∆∞·ªõc`;
    } else if (diffInMinutes < 1440) {
      const hours = Math.floor(diffInMinutes / 60);
      return `${hours} gi·ªù tr∆∞·ªõc`;
    } else {
      const days = Math.floor(diffInMinutes / 1440);
      return `${days} ng√†y tr∆∞·ªõc`;
    }
  };

  const addMessage = async (e) => {
    e.preventDefault();
    if (newMessage.name && newMessage.message) {
      setIsSubmitting(true);
      setError('');
      try {
        const messagesRef = ref(database, 'messages');
        const newMessageRef = push(messagesRef);
        await set(newMessageRef, {
          name: newMessage.name,
          message: newMessage.message,
          timestamp: new Date().toISOString()
        });
        setNewMessage({ name: '', message: '' });
        alert('G·ª≠i l·ªùi ch√∫c th√†nh c√¥ng! üíù');
      } catch (error) {
        setError('Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  const filteredMessages = guestMessages.filter(msg => 
    msg.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    msg.message.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Pastel color palette for cards
  const pastelColors = [
    '#fff6fa', '#f8e1f4', '#e3f6fd', '#fef6e4', '#e4f9f5', '#f3e8ff', '#f9fbe7'
  ];

  return (
    <section className="guest-book-section">
      <div className="guest-book-title">
        <FaBook style={{ fontSize: '2rem', color: '#a29bfe', marginBottom: '0.5rem', verticalAlign: 'middle' }} />
        <span style={{ marginLeft: 8 }}>S·ªï l∆∞u b√∫t</span>
      </div>
      <div className="guest-book-search" style={{ display: 'flex', justifyContent: 'center', marginBottom: 24 }}>
        <input
          type="text"
          className="guest-book-search-input"
          placeholder="T√¨m ki·∫øm l·ªùi ch√∫c..."
          value={searchTerm}
          onChange={e => setSearchTerm(e.target.value)}
          style={{ maxWidth: 400, width: '100%' }}
        />
      </div>
      {error && <div className="guest-book-error">{error}</div>}
      <div className="guest-book-flex">
        <form className="guest-message-form" onSubmit={addMessage}>
          <div className="guest-book-subtitle" style={{textAlign:'center'}}>
            <FaEdit className="subtitle-icon" /> G·ª≠i l·ªùi ch√∫c
          </div>
          <div className="guest-book-form-fields">
            <input
              type="text"
              className="guest-book-input"
              placeholder="T√™n c·ªßa b·∫°n"
              value={newMessage.name}
              onChange={e => setNewMessage({ ...newMessage, name: e.target.value })}
              required
            />
            <textarea
              className="guest-book-textarea"
              placeholder="G·ª≠i l·ªùi ch√∫c ƒë·∫øn c√¥ d√¢u ch√∫ r·ªÉ..."
              value={newMessage.message}
              onChange={e => setNewMessage({ ...newMessage, message: e.target.value })}
              required
            />
          </div>
          <button
            type="submit"
            className="guest-book-submit-btn"
            disabled={isSubmitting}
          >
            {isSubmitting ? 'ƒêang g·ª≠i...' : 'G·ª≠i l·ªùi ch√∫c üíå'}
          </button>
        </form>
        <div className="guest-messages">
          <div className="guest-book-subtitle" style={{textAlign:'center'}}>
            <FaListUl className="subtitle-icon" /> Danh s√°ch l·ªùi ch√∫c
          </div>
          <div className="guest-messages-list">
            {filteredMessages.length === 0 && (
              <div className="guest-empty">Ch∆∞a c√≥ l·ªùi ch√∫c n√†o.</div>
            )}
            {filteredMessages.map((msg, idx) => (
              <div
                className="guest-message"
                key={msg.id}
                style={{ '--card-bg': pastelColors[idx % pastelColors.length] }}
              >
                <div className="message-header">
                  <span className="message-name">{msg.name}</span>
                  <span className="message-time">{formatTimestamp(msg.timestamp)}</span>
                </div>
                <div className="message-text">{msg.message}</div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}

function Header() {
  const triggerConfetti = () => {
    confetti({
      particleCount: 100,
      spread: 70,
      origin: { y: 0.6 }
    });
  };

  return (
    <AnimatedSection className="header" animation="fadeInUp">
      <div className="header-background"></div>
      
      <motion.div 
        className="header-content"
        initial={{ opacity: 0, y: 50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 1 }}
      >
        <motion.div 
          className="title-wrapper"
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ delay: 0.5, type: "spring", stiffness: 200 }}
        >
          <motion.h1 
            className="main-title"
            onHoverStart={triggerConfetti}
            whileHover={{ scale: 1.05 }}
          >
            Mai Y·∫øn & Tu·∫•n Linh
          </motion.h1>
          <motion.div 
            className="title-decoration"
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ delay: 0.8 }}
          >
            <FaHeart className="heart-icon" />
          </motion.div>
        </motion.div>

        <motion.p 
          className="subtitle"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1 }}
        >
          Ch√∫ng m√¨nh s·∫Ω k·∫øt h√¥n!
        </motion.p>

        <motion.div 
          className="date-venue"
          initial={{ opacity: 0, scale: 0 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 1.5, type: "spring" }}
        >
          <motion.div 
            className="date"
            whileHover={{ scale: 1.05 }}
          >
            <FaCalendarAlt /> 14 th√°ng 6, 2025
          </motion.div>
          <motion.div 
            className="venue"
            whileHover={{ scale: 1.05 }}
          >
            <FaMapMarkerAlt /> Nh√† Mai Y·∫øn (Vƒ©nh T√¢n, T√¢n Uy√™n, B√¨nh D∆∞∆°ng)
          </motion.div>
        </motion.div>
        
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 2 }}
        >
          <CountdownTimer />
        </motion.div>
      </motion.div>
    </AnimatedSection>
  );
}

function CoupleSection() {
  return (
    <AnimatedSection className="couple-section" animation="fadeInUp">
      <div className="couple-section-background"></div>
      <div className="couple-content">
        <motion.div 
          className="section-title"
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
        >
          <FaHeart className="title-icon" />
          <h2>C·∫∑p ƒë√¥i h·∫°nh ph√∫c</h2>
        </motion.div>

        <div className="couple-info">
          <div className="couple-photo-container">
            <motion.div 
              className="photo-container bride"
              whileHover={{ scale: 1.05 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <div className="photo-frame">
                <img 
                  src={DEMO_BRIDE_IMAGE} 
                  alt="C√¥ d√¢u" 
                  className="couple-photo"
                />
                <div className="photo-overlay">
                  <h3>C√¥ d√¢u</h3>
                  <p>Mai Y·∫øn</p>
                </div>
              </div>
            </motion.div>
            
            <motion.div 
              className="heart-divider"
              animate={{ 
                scale: [1, 1.2, 1],
                rotate: [0, 10, 0]
              }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              <FaHeart className="heart-icon-large" />
            </motion.div>
            
            <motion.div 
              className="photo-container groom"
              whileHover={{ scale: 1.05 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <div className="photo-frame">
                <img 
                  src={DEMO_GROOM_IMAGE} 
                  alt="Ch√∫ r·ªÉ" 
                  className="couple-photo"
                />
                <div className="photo-overlay">
                  <h3>Ch√∫ r·ªÉ</h3>
                  <p>Tu·∫•n Linh</p>
                </div>
              </div>
            </motion.div>
          </div>

          <motion.div 
            className="love-story-container"
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            transition={{ delay: 0.6 }}
          >
            <h3>Our Story</h3>
            <p className="love-story">
              "C·∫£ nh√† ∆°i, gi·∫≠t m√¨nh ch∆∞a? Mai Y·∫øn ch√≠nh th·ª©c "t·∫°m bi·ªát em y√™u ƒë·ªôc th√¢n" v√†o ng√†y 14/6/2025.
               Nay Mai Y·∫øn ƒë√£ s·∫µn s√†ng "ch·ªët k√®o" ƒë·ªÉ phi√™u l∆∞u v√†o th·∫ø gi·ªõi "c√≥ ƒë√¥i c√≥ c·∫∑p". 
               M·ªùi m·ªçi ng∆∞·ªùi ƒë·∫øn ti·ªác vui c√πng Mai Y·∫øn v√† Tu·∫•n Linh nha. M√£i y√™u m·ªçi ng∆∞·ªùi ‚ù§Ô∏è"
            </p>
          </motion.div>
        </div>

        <LoveQuotes />
      </div>
    </AnimatedSection>
  );
}

function Timeline() {
  const timelineData = [
    {
      time: "10:00",
      title: "L·ªÖ ƒÉn h·ªèi",
      description: "T·∫°i nh√† c√¥ d√¢u"
    },
    {
      time: "11:00", 
      title: "Ti·ªác m·ª´ng",
      description: "Nh√† Mai Y·∫øn (Vƒ©nh T√¢n, T√¢n Uy√™n, B√¨nh D∆∞∆°ng)"
    }
  ];

  return (
    <AnimatedSection className="timeline-section" animation="fadeInLeft">
      <motion.h2 
        className="timeline-title"
        initial={{ opacity: 0, y: 30 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
      >
        Ch∆∞∆°ng tr√¨nh ng√†y c∆∞·ªõi
      </motion.h2>
      <StaggeredContainer className="timeline" staggerDelay={0.2}>
        {timelineData.map((item, index) => (
          <StaggeredItem key={index} className="timeline-item">
            <div className="timeline-time">{item.time}</div>
            <div className="timeline-content">
              <h3>{item.title}</h3>
              <p>{item.description}</p>
            </div>
          </StaggeredItem>
        ))}
      </StaggeredContainer>
    </AnimatedSection>
  );
}

function Gallery() {
  return (
    <AnimatedSection className="gallery-section" animation="scaleIn">
      <motion.h2 
        className="gallery-title"
        initial={{ opacity: 0, y: 30 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
      >
        K·ª∑ ni·ªám c·ªßa ch√∫ng m√¨nh
      </motion.h2>
      <StaggeredContainer className="gallery-grid" staggerDelay={0.1}>
        {DEMO_GALLERY_IMAGES.map((image, index) => (
          <StaggeredItem key={index} className="gallery-item">
            <motion.div 
              whileHover={{ scale: 1.05 }}
            >
              <img 
                src={image} 
                alt={`K·ª∑ ni·ªám ${index + 1}`} 
                className="gallery-photo"
              />
            </motion.div>
          </StaggeredItem>
        ))}
      </StaggeredContainer>
    </AnimatedSection>
  );
}

function Footer() {
  return (
    <AnimatedSection className="footer" animation="fadeInUp">
      <motion.div
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        viewport={{ once: true }}
      >
        <p className="footer-text">
          C·∫£m ∆°n b·∫°n ƒë√£ d√†nh th·ªùi gian xem thi·ªáp m·ªùi c·ªßa ch√∫ng m√¨nh
        </p>
        <div className="footer-hearts">üíï üíï üíï</div>
        <p style={{marginTop: '10px', fontSize: '0.9rem', opacity: 0.7}}>
          V·ªõi t√¨nh y√™u, Mai Y·∫øn & Tu·∫•n Linh
        </p>
      </motion.div>
    </AnimatedSection>
  );
}

function App() {
  const [loading, setLoading] = useState(true);
  const [showMusicControl, setShowMusicControl] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
      setShowMusicControl(true);
    }, 2000);

    return () => clearTimeout(timer);
  }, []);

  if (loading) {
    return (
      <div className="loading">
        <div className="loading-background"></div>
        <motion.div
          className="loading-content"
          initial={{ opacity: 0, scale: 0 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 1 }}
        >
          <div className="loading-rings">
            <motion.div 
              className="loading-ring ring-1"
              animate={{ rotate: 360 }}
              transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
            />
            <motion.div 
              className="loading-ring ring-2"
              animate={{ rotate: -360 }}
              transition={{ duration: 3, repeat: Infinity, ease: "linear" }}
            />
            <motion.div 
              className="loading-ring ring-3"
              animate={{ rotate: 360 }}
              transition={{ duration: 4, repeat: Infinity, ease: "linear" }}
            />
          </div>
          <motion.div
            className="loading-heart-container"
            animate={{ 
              scale: [1, 1.2, 1],
              y: [0, -10, 0]
            }}
            transition={{ 
              duration: 2,
              repeat: Infinity,
              ease: "easeInOut"
            }}
          >
            <FaHeart className="loading-heart" />
          </motion.div>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
          >
            ƒêang t·∫£i thi·ªáp c∆∞·ªõi...
          </motion.p>
          <div className="loading-dots">
            <motion.span
              animate={{ opacity: [0, 1, 0] }}
              transition={{ duration: 1.5, repeat: Infinity, delay: 0 }}
            >.</motion.span>
            <motion.span
              animate={{ opacity: [0, 1, 0] }}
              transition={{ duration: 1.5, repeat: Infinity, delay: 0.5 }}
            >.</motion.span>
            <motion.span
              animate={{ opacity: [0, 1, 0] }}
              transition={{ duration: 1.5, repeat: Infinity, delay: 1 }}
            >.</motion.span>
          </div>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="wedding-invitation">
      <FlowerCursorEffect />
      <AnimatePresence>
        {showMusicControl && <MusicControl />}
      </AnimatePresence>
      
      {/* Global Effects for entire page */}
      <FloatingHearts />
      <HeaderPetalsEffect />
      <HeaderBalloonsEffect />
      <HeaderFireworksEffect />
      <HeaderHeartsEffect />
      
      <Header />
      <CoupleSection />
      <Timeline />
      <Gallery />
      <GuestBook />
      <WeddingMap />
      <Footer />
    </div>
  );
}

export default App; 